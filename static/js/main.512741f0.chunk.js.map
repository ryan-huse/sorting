{"version":3,"sources":["Sort.jsx","MakeList.jsx","Base.jsx","App.js","serviceWorker.js","index.js"],"names":["Sort","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","react_default","a","createElement","id","uk-sortable","values","map","element","key","Math","random","className","React","Component","MakeList","state","list","handleSubmit","bind","assertThisInitialized","Finished","prevProps","prevState","snapshot","step","both","onlyUnique","first","second","setState","unique1","object","concat","indexOf","splice","unique2","value","window","document","getElementById","trim","toUpperCase","focus","event","keyCode","which","next","onKeyPress","enterPressed","onClick","style","position","marginLeft","backgroundColor","color","src_Sort","Base","updateList","src_MakeList","App","src_Base","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.512741f0.chunk.js","sourcesContent":["import React from 'react';\n\nclass Sort extends React.Component {\n    // Then we add our constructor which receives our props\n    constructor(props) {\n        super(props);\n    }\n\n    // The render function, where we actually tell the browser what it should show\n    render() {\n\n        var stuff = () =>  this.props.values.map(element => \n            <div key={Math.random()} className=\"uk-margin\">\n                <div className=\"uk-card uk-card-default uk-card-body uk-card-small\">{element}</div>\n            </div>\n        );\n\n        return (\n            <div>\n                <div id=\"demo\" uk-sortable=\"group: sortable-group\">\n                    {stuff()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Sort;","import React from 'react';\nimport Sort from './Sort';\n\nclass MakeList extends React.Component {\n\n    // Then we add our constructor which receives our props\n    constructor(props) {\n        super(props);\n        this.state = {\n            list:[]\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.Finished = this.Finished.bind(this);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot){\n        if(this.props.step !== prevProps.step)\n        if(this.props.step === 3){\n            var both = this.onlyUnique(this.props.first,this.props.second)\n            this.setState({list: both})\n         }else{\n             this.setState({list:[]})\n         }\n    }\n\n    onlyUnique(first,second) { \n        var unique1 = first.map(element => {\n                var object = element.concat(\" 1\")\n                if(second.indexOf(element) !== -1){\n                    second.splice(second.indexOf(element),1)\n                    return object.concat(\" 2\");\n                }else{\n                    return object;\n                }\n        });\n        var unique2 = second.map(element =>{\n                return element.concat(\" 2\")\n        })\n\n        return unique1.concat(unique2);\n    }\n\n    handleSubmit(){\n        var value = window.document.getElementById(\"stuff\").value.trim();\n\n        if(value && this.state.list.indexOf(value.toUpperCase())===-1)\n            this.setState({list:this.state.list.concat(value.toUpperCase())}, ()=> {window.document.getElementById(\"stuff\").value=\"\"; window.document.getElementById(\"stuff\").focus()});\n    }\n\n    enterPressed(event) {\n        var code = event.keyCode || event.which;\n        if(code === 13) { //13 is the enter keycode\n            this.handleSubmit();\n        } \n    }\n    \n    Finished(){\n        this.props.next(this.state.list)\n    }\n\n    // The render function, where we actually tell the browser what it should show\n    render() {\n        return (\n            <div>\n               {this.props.step!==3 ? <div><label>Input {this.props.step}: </label><input id=\"stuff\" onKeyPress={this.enterPressed.bind(this)}></input>\n                <button onClick={this.handleSubmit} style={{position:\"relative\", marginLeft:\"50px\"}}>Add</button>\n                <button onClick={this.Finished} style={{position:\"relative\", marginLeft:\"250px\", backgroundColor:\"green\", color:\"white\"}}>Next</button></div>:\"\"}\n\n\n                <Sort values={this.state.list}/>\n            </div>\n        )\n    }\n}\n\nexport default MakeList;","import React from 'react';\nimport MakeList from './MakeList'\n\nclass Base extends React.Component {\n\n      // Then we add our constructor which receives our props\n    constructor(props) {\n        super(props);\n        this.state = {\n            first:[],\n            second: [],\n            step: 1,\n        }\n        this.updateList = this.updateList.bind(this);\n    }\n\n\n    \n   updateList(value){\n        if(this.state.step===1)\n            this.setState({first:value,step:2});\n        if(this.state.step===2)\n            this.setState({second:value, step:3});\n        \n    }\n\n    // The render function, where we actually tell the browser what it should show\n    render() {\n        return (\n            <MakeList next={this.updateList} step={this.state.step} first={this.state.first} second={this.state.second}/>\n        );\n    }\n}\n\nexport default Base;","import React from 'react';\nimport Base from './Base';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Base/> \n  )\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'core-js/es/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}